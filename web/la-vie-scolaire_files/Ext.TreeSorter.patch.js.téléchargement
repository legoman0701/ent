/*
 * Copyright © FYLAB and the Conseil Régional d'Île-de-France, 2009
 * This file is part of L'Interface Libre et Interactive de l'Enseignement (Lilie).
 *
 * Lilie is free software. You can redistribute it and/or modify since
 * you respect the terms of either (at least one of the both license) :
 * - under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * - the CeCILL-C as published by CeCILL-C; either version 1 of the
 * License, or any later version
 *
 * There are special exceptions to the terms and conditions of the
 * licenses as they are applied to this software. View the full text of
 * the exception in file LICENSE.txt in the directory of this software
 * distribution.
 *
 * Lilie is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Licenses for more details.
 *
 * You should have received a copy of the GNU General Public License
 * and the CeCILL-C along with Lilie. If not, see :
 *  <http://www.gnu.org/licenses/> and
 *  <http://www.cecill.info/licences.fr.html>.
 */

Ext.tree.TreeSorter = Ext.extend(Object, {

    constructor: function(tree, config) {
        Ext.apply(this, config);
        tree.on({
            scope: this,
            beforechildrenrendered: this.doSort,
            append: this.updateSort,
            insert: this.updateSort,
            textchange: this.updateSortParent
        });

        var desc = this.dir && this.dir.toLowerCase() == 'desc',
                prop = this.property || 'text',
                sortType = this.sortType,
                folderSort = this.folderSort,
                caseSensitive = this.caseSensitive === true,
                leafAttr = this.leafAttr || 'leaf';

        if (Ext.isString(sortType)) {
            sortType = Ext.data.SortTypes[sortType];
        }
        this.sortFn = function(n1, n2) {
            var attr1 = n1.attributes,
                    attr2 = n2.attributes;

            if (folderSort) {
                if (attr1[leafAttr] && !attr2[leafAttr]) {
                    return 1;
                }
                if (!attr1[leafAttr] && attr2[leafAttr]) {
                    return -1;
                }
            }
            var prop1 = attr1[prop],
                    prop2 = attr2[prop],
                    v1 = sortType ? sortType(n1) : (caseSensitive ? prop1 : prop1.toUpperCase()), // Ligne patchée
                    v2 = sortType ? sortType(n2) : (caseSensitive ? prop2 : prop2.toUpperCase()); // Ligne patchée

            if (v1 < v2) {
                return desc ? 1 : -1;
            } else if (v1 > v2) {
                return desc ? -1 : 1;
            }
            return 0;
        };
    },

    doSort : function(node) {
        node.sort(this.sortFn);
    },

    updateSort : function(tree, node) {
        if (node.childrenRendered) {
            this.doSort.defer(1, this, [node]);
        }
    },

    updateSortParent : function(node) {
        var p = node.parentNode;
        if (p && p.childrenRendered) {
            this.doSort.defer(1, this, [p]);
        }
    }
});
/*
 * Copyright © FYLAB and the Conseil Régional d'Île-de-France, 2009
 *  This file is part of L'Interface Libre et Interactive de l'Enseignement (Lilie).
 *
 *  Lilie is free software. You can redistribute it and/or modify since
 *  you respect the terms of either (at least one of the both license) :
 *  - under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *  - the CeCILL-C as published by CeCILL-C; either version 1 of the
 *  License, or any later version
 *
 *  There are special exceptions to the terms and conditions of the
 *  licenses as they are applied to this software. View the full text of
 *  the exception in file LICENSE.txt in the directory of this software
 *  distribution.
 *
 *  Lilie is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  Licenses for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  and the CeCILL-C along with Lilie. If not, see :
 *  <http://www.gnu.org/licenses/> and
 *  <http://www.cecill.info/licences.fr.html>.
 */


Ext.ns('eliot.textes.commons');

eliot.textes.commons.Utils = {

  supprimeLoadMask : function(time) {
    setTimeout(function() {
      var divLoading = Ext.get('loading');
      var divLoadingMask = Ext.get('loading-mask');
      if (divLoading && divLoadingMask) {
        Ext.get('loading').remove();
        Ext.get('loading-mask').fadeOut({remove:true});
      }
    }, time);
  },

  /**
   * Tri alphabéthique  => 2nde_10 avant 2nde_9
   * @param a
   * @param b
   * @returns {number}
   */
  triAlpha : function(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  },

  /**
   * Tri naturel => 2nde_9 avant 2nde_10
   * @param a
   * @param b
   * @returns {number}
   */
  triNaturel : function(a, b) {
    var x = [], y = [];

    a.replace(/(\d+)|(\D+)/g, function($0, $1, $2) { x.push([$1 || 0, $2]) })
    b.replace(/(\d+)|(\D+)/g, function($0, $1, $2) { y.push([$1 || 0, $2]) })

    while(x.length > 0 && y.length > 0) {
      var xx = x.shift();
      var yy = y.shift();
      var nn = (xx[0] - yy[0]) || this.triAlpha(xx[1], yy[1]);
      if(nn) return nn;
    }
    return 0;
  }

};
